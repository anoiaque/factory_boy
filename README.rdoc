== Overview
Factory_boy aims to avoid slow unit tests due to usage of create/find fixtures in database, with factory_girl for example.
Factory_boy can be used as factory_girl except that factories are not created in database.
ActiveRecord::Base find method is stubbed to return fixtures (plants) you have instanciate.
Differenciate find :all, :first, :last, but doesn't do the work of find with sql conditions.
Anyway we don't think it's important for unit test, if some find calls with sql conditions, :include ... etc have to be
tested, report it in inetgration tests.

See some examples below.
You can see also unit tests / code  for deeper comprehension.

== Basic Usage

Define your Plants (=~ Factories if factory_girl) in test/plants.rb

<b>Example :</b>

<pre>Plant.define :user do |user|
  user.name  = "Bart"
  user.age = 800
end</pre>

Get it with : user = Plant(:user)


Example of tests :


def test___1
  user = Plant(:user)
  assert_equal user, User.find #OK
  assert_equal user, User.find(:first) #OK
  assert_equal user, User.find(:last) #OK
end


def test___2
  2.times { Plant(:user) }
  assert_equal 2, User.find(:all).size #OK
end


*You can also create a particular plant of user like that:

user = Plant(:user, :name => "Marie", :age => age)

== Specification of  the class of the fixture definition 

Plant.define :admin, :class => User do |user|
  user.name  = "Bart"
  user.age = 800
end

== Associations 

Very easy to assign fixtures to association in dÃ©finition of plant :

Plant.define :profile do |profile|
  profile.password = "BREIZH!"
end

Plant.define :adress do |adress|
  adress.number = 12
  adress.street = "rue de Brest"
end

Plant.define :user do |user|
  user.name  = "Bart"
  user.age = 800
  user.profile = Plant(:profile)
  user.adresses = [Plant(:adress, :street => "Rue de Quimper")]
end


== Definitions with dependent attributes

If you want to use the value of another attribute in definition, do like that :

Plant.define :user do |user|
   user.name = "Marie"
   user.adresses = [Adress.new(:street => "Rue de #{user.name}")]
end


== Sequences

As with factory_girl you are able to use sequences, like that :

Plant.sequence :email do |n|
  "incognito#{n}@kantena.com"
end

Plant.next(:email) # => "incognito1@kantena.com"
Plant.next(:email) # => "incognito2@kantena.com"


== Dependencies 

No dependency.
Not tested with rails 3


== New features ?

Stubs find with sql conditions ? That means transform :conditions in object.select ... We think of it !
Report Bugs here , on github